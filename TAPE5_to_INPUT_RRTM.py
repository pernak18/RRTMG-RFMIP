#!/usr/bin/env python

import os, sys

# chemical names for XS species, their indices in a given record
# CF4 is another acceptable cross section for RRTMG, but initially
# we are treating it as a line-by-line gas in LBLRTM
XSLBL = ['CCL3F', 'CCL2F2', 'CHClF2', 'CHF3', 'CH2F2', 'CHF2CF3', \
  'CFH2CF3', 'CF3CH3', 'CCL4']
ALIAS = ['CFC11', 'CFC12', 'CFC22', 'HFC23', 'HFC32', 'HFC-125', \
  'HFC-134a', 'HFC-143a', 'CCL4']

if __name__ == '__main__':
  import argparse

  parser = argparse.ArgumentParser(\
    description='Distill an LBLRTM TAPE5 down to what is needed ' + \
    'for RRTMG input. The two inputs are very similar, but there ' + \
    'is less information needed for RRTMG. Pretty ad-hoc, but ' + \
    'flexibility might not be necessary.')
  parser.add_argument('tape5', type=str, help='LBLRTM TAPE5 for ' + \
    'RFMIP generated by' + \
    'https://github.com/pernak18/RFMIP_Buehler_Experiments/blob/master/pyscripts/make_TAPE5.py')
  parser.add_argument('--outfile', '-o', type=str, \
    default='INPUT_RRTM', help='Name of output file, which will ' + \
    'be used as input into RRTM.')
  parser.add_argument('--drop', '-d', type=str, \
    help='RRTMG XS species name to omit. All species are kept ' + \
    'if this is not set. Case-sensitive. See ALIAS global variable.')
  args = parser.parse_args()

  inT5 = args.tape5
  if not os.path.exists(inT5): sys.exit('Cannot find {}'.format(inT5))

  # determine what XS species to keep
  dropXS = args.drop
  if dropXS is not None:
    try:
      iXS = ALIAS.index(dropXS)
      XSLBL.pop(iXS)
      ALIAS.pop(iXS)
      print('{} dropped from ALIAS list'.format(dropXS))
    except:
      print('Could not find {} in allowable names'.format(dropXS))
      print('  --drop should be in [{}]'.format(', '.join(ALIAS)))
      raise
    # end exception
  # endif dropXS

  inDat = open(inT5).read().splitlines()

  outDat = []
  xsNames = []

  # indices in records 2.2.4 and 2.2.5 (see lblrtm_instructions.html)
  # of species to keep
  idx224, idx225 = [], []
  for iLine, line in enumerate(inDat):
    # do not need any of the RADSUM blocks, which are at the end of
    # the TAPE5
    if iLine >= 608 and iLine < 650: continue

    # keep LBL records 1.1, 1.2, 2.1 (number of molecules in 2.1
    # goes from )
    if iLine in [0, 1]: outDat.append(line)
    if iLine == 3: outDat.append(line.replace('42','{:2d}'.format(7)))

    # profile information for line-by-line molecules
    # layer P, T, Z
    if (iLine < 424) and ((iLine-4) % 7 == 0): outDat.append(line)

    # "Big 7" molecules + broadening
    if (iLine < 424) and ((iLine-5) % 7 == 0): outDat.append(line)

    # number of XS species
    if iLine == 424: outDat.append(line)

    # species names: only keep the 10 in RRTMG v4.86
    if iLine == 425:
      split = line.split()
      for iXS, xs in enumerate(split):
        if xs in XSLBL:
          # keep species name and corresponding index for usage
          # with records 2.2.4 and 2.2.5
          xsNames.append(ALIAS[XSLBL.index(xs)])
          if iLine == 425: idx224.append(iXS)
        # endif XS
      # end split loop
    # endif 425

    if iLine == 426:
      split = line.split()
      for iXS, xs in enumerate(split):
        if xs in XSLBL:
          # keep species name and corresponding index for usage
          # with records 2.2.4 and 2.2.5
          xsNames.append(ALIAS[XSLBL.index(xs)])
          if iLine == 426: idx225.append(iXS)
        # endif XS
      # end split loop

      print(xsNames)
      sys.exit()
      # write to output file the first 7 XS names
      # record 2.2.1
      record221 = ['{:10s}'.format(name) for name in xsNames[:7]]
      record221 = ''.join(record221)
      outDat.append(record221)

      # write the species names (RRTMG allows at most 10 XS
      # species, so record 2.2.1 spans 2 lines at most)
      record221 = ['{:10s}'.format(name) for name in xsNames[7:]]
      record221 = ''.join(record221)
      outDat.append(record221)
    # endif 426

    # profile information for cross section species
    if iLine == 427: outDat.append(line)

    # layer P, T, Z
    if (iLine > 427) and ((iLine-428) % 3 == 0): outDat.append(line)

    # species concentrations
    if (iLine > 427) and ((iLine-428) % 3 == 1):
      xsConc = []
      split = line.split()
      broad = split[7]

      for i224 in idx224:
        xsConc.append(split[i224])
        nXS = len(xsConc)
        if nXS == 7: xsConc.append(broad)
      # end i224 loop
    # endif conc line 1

    if (iLine > 427) and ((iLine-428) % 3 == 2):
      split = line.split()
      for i225 in idx225:
        xsConc.append(split[i225])
        nXS = len(xsConc)
        if nXS == 7: xsConc.append(broad)
      # end i225 loop

      outDat.append(' '.join(xsConc))
    # endif conc line 2

  # end line loop

  # write RRTM input file
  with open(args.outfile, 'w') as outFP:
    for line in outDat: outFP.write('{:s}\n'.format(line))

  print('Wrote {}'.format(args.outfile))
# endif main()
